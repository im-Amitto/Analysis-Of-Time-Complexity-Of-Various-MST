#include<bits/stdc++.h>
using namespace std;
using namespace std::chrono;
struct Edge
{
    int src, dest, weight;
};

struct Graph
{
    int V, E;
    struct Edge* edge;
};

struct Graph* createGraph(int V, int E)
{
    struct Graph* graph = new Graph;
    graph->V = V;
    graph->E = E;
    graph->edge = new Edge[E];
    return graph;
}

struct subset
{
    int parent;
    int rank;
};

int find(struct subset subsets[], int i)
{
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

void Union(struct subset subsets[], int x, int y)
{
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else
    {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

int myComp(const void* a, const void* b)
{
    struct Edge* a1 = (struct Edge*)a;
    struct Edge* b1 = (struct Edge*)b;
    return a1->weight > b1->weight;
}

void KruskalMST(struct Graph* graph)
{
  time_point<system_clock> start, end;
  start = system_clock::now();
    int V = graph->V;
    struct Edge result[V];
    int e = 0;
    int i = 0;
    qsort(graph->edge, graph->E, sizeof(graph->edge[0]), myComp);
    struct subset *subsets =
        (struct subset*) malloc( V * sizeof(struct subset) );
    for (int v = 0; v < V; ++v)
    {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
    while (e < V - 1)
    {
        struct Edge next_edge = graph->edge[i++];
        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);
        if (x != y)
        {
            result[e++] = next_edge;
            Union(subsets, x, y);
        }
    }

    end = system_clock::now();
    duration<double> elapsed_seconds = end - start;
    cout <<elapsed_seconds.count() << "s }";
    int weight=0;
    for (i = 0; i < e; ++i)
    {
        printf("%d -- %d , ", result[i].src, result[i].dest);
        weight+= result[i].weight;
    }
    printf("}%d\n}", weight);
    return;
}
struct AdjListNode
{
    int dest;
    int weight;
    struct AdjListNode* next;
};

struct AdjList
{
    struct AdjListNode *head;
};

struct GraphP
{
    int V;
    struct AdjList* array;
};

struct AdjListNode* newAdjListNode(int dest, int weight)
{
    struct AdjListNode* newNode =
            (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->weight = weight;
    newNode->next = NULL;
    return newNode;
}

struct GraphP* createGraphP(int V)
{
    struct GraphP* graph = (struct GraphP*) malloc(sizeof(struct GraphP));
    graph->V = V;

    graph->array = (struct AdjList*) malloc(V * sizeof(struct AdjList));

    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;

    return graph;
}

void addEdge(struct GraphP* graph, int src, int dest, int weight)
{
    struct AdjListNode* newNode = newAdjListNode(dest, weight);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    newNode = newAdjListNode(src, weight);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

struct MinHeapNode
{
    int  v;
    int key;
};

struct MinHeap
{
    int size;
    int capacity;
    int *pos;
    struct MinHeapNode **array;
};

struct MinHeapNode* newMinHeapNode(int v, int key)
{
    struct MinHeapNode* minHeapNode =
           (struct MinHeapNode*) malloc(sizeof(struct MinHeapNode));
    minHeapNode->v = v;
    minHeapNode->key = key;
    return minHeapNode;
}

struct MinHeap* createMinHeap(int capacity)
{
    struct MinHeap* minHeap =
         (struct MinHeap*) malloc(sizeof(struct MinHeap));
    minHeap->pos = (int *)malloc(capacity * sizeof(int));
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array =
         (struct MinHeapNode**) malloc(capacity * sizeof(struct MinHeapNode*));
    return minHeap;
}

void swapMinHeapNode(struct MinHeapNode** a, struct MinHeapNode** b)
{
    struct MinHeapNode* t = *a;
    *a = *b;
    *b = t;
}

void minHeapify(struct MinHeap* minHeap, int idx)
{
    int smallest, left, right;
    smallest = idx;
    left = 2 * idx + 1;
    right = 2 * idx + 2;

    if (left < minHeap->size &&
        minHeap->array[left]->key < minHeap->array[smallest]->key )
      smallest = left;

    if (right < minHeap->size &&
        minHeap->array[right]->key < minHeap->array[smallest]->key )
      smallest = right;

    if (smallest != idx)
    {
        MinHeapNode *smallestNode = minHeap->array[smallest];
        MinHeapNode *idxNode = minHeap->array[idx];

        minHeap->pos[smallestNode->v] = idx;
        minHeap->pos[idxNode->v] = smallest;

        swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]);

        minHeapify(minHeap, smallest);
    }
}

int isEmpty(struct MinHeap* minHeap)
{
    return minHeap->size == 0;
}

struct MinHeapNode* extractMin(struct MinHeap* minHeap)
{
    if (isEmpty(minHeap))
        return NULL;

    struct MinHeapNode* root = minHeap->array[0];

    struct MinHeapNode* lastNode = minHeap->array[minHeap->size - 1];
    minHeap->array[0] = lastNode;

    minHeap->pos[root->v] = minHeap->size-1;
    minHeap->pos[lastNode->v] = 0;

    --minHeap->size;
    minHeapify(minHeap, 0);

    return root;
}

void decreaseKey(struct MinHeap* minHeap, int v, int key)
{
    int i = minHeap->pos[v];

    minHeap->array[i]->key = key;

    while (i && minHeap->array[i]->key < minHeap->array[(i - 1) / 2]->key)
    {
        minHeap->pos[minHeap->array[i]->v] = (i-1)/2;
        minHeap->pos[minHeap->array[(i-1)/2]->v] = i;
        swapMinHeapNode(&minHeap->array[i],  &minHeap->array[(i - 1) / 2]);

        i = (i - 1) / 2;
    }
}

bool isInMinHeap(struct MinHeap *minHeap, int v)
{
   if (minHeap->pos[v] < minHeap->size)
     return true;
   return false;
}

void printArr(int arr[], int n)
{
    for (int i = 1; i < n; ++i)
        printf("%d -- %d, ", arr[i], i);
}

void PrimMST(struct GraphP* graph)
{
  time_point<system_clock> start, end;
  start = system_clock::now();
    int V = graph->V;
    int parent[V];
    int key[V];

    struct MinHeap* minHeap = createMinHeap(V);

    for (int v = 1; v < V; ++v)
    {
        parent[v] = -1;
        key[v] = INT_MAX;
        minHeap->array[v] = newMinHeapNode(v, key[v]);
        minHeap->pos[v] = v;
    }

    key[0] = 0;
    minHeap->array[0] = newMinHeapNode(0, key[0]);
    minHeap->pos[0]   = 0;

    minHeap->size = V;
int weight=0;
    while (!isEmpty(minHeap))
    {
        struct MinHeapNode* minHeapNode = extractMin(minHeap);
        int u = minHeapNode->v;
        struct AdjListNode* pCrawl = graph->array[u].head;
        while (pCrawl != NULL)
        {
            int v = pCrawl->dest;

            if (isInMinHeap(minHeap, v) && pCrawl->weight < key[v])
            {
                key[v] = pCrawl->weight;
                parent[v] = u;
                decreaseKey(minHeap, v, key[v]);
                weight += pCrawl->weight;
            }
            pCrawl = pCrawl->next;
        }
    }
    end = system_clock::now();
    duration<double> elapsed_seconds = end - start;
    cout <<elapsed_seconds.count() << "s }";
    printArr(parent, V);
    cout<<"}"<<weight<<"}";
}
typedef  pair<int, int> iPair;
class GraphC
{
    int V;
    list<int> *adj;
    vector< pair<int, iPair> > edges;
    void DFS(int v, bool visited[]);

public:
    GraphC(int V);
    void addEdge(int u, int v, int w);
    bool isConnected();
    void reverseDeleteMST();
};

GraphC::GraphC(int V)
{
    this->V = V;
    adj = new list<int>[V];
}

void GraphC::addEdge(int u, int v, int w)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
    edges.push_back({w, {u, v}});
}

void GraphC::DFS(int v, bool visited[])
{
    visited[v] = true;
    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
        if (!visited[*i])
            DFS(*i, visited);
}

bool GraphC::isConnected()
{
    bool visited[V];
    memset(visited, false, sizeof(visited));
    DFS(0, visited);
    for (int i=1; i<V; i++)
        if (visited[i] == false)
            return false;
    return true;
}

void GraphC::reverseDeleteMST()
{
  time_point<system_clock> start, end;
  start = system_clock::now();
    sort(edges.begin(), edges.end());

    int mst_wt = 0;

    for (int i=edges.size()-1; i>=0; i--)
    {
        int u = edges[i].second.first;
        int v = edges[i].second.second;
        adj[u].remove(v);
        adj[v].remove(u);
        if (isConnected() == false)
        {
            adj[u].push_back(v);
            adj[v].push_back(u);
            cout <<u<< " -- " << v <<" ,"<<endl;
            mst_wt += edges[i].first;
        }
    }
    end = system_clock::now();
    duration<double> elapsed_seconds = end - start;
    cout <<"}"<<elapsed_seconds.count() << "s }";
    cout <<mst_wt;
}

int reversedelete(int V,int E,int s[],int d[],int c[])
{
    GraphC g(V);
    for(int i=0;i<E;i++)
    {
      g.addEdge(s[i], d[i], c[i]);
    }

    g.reverseDeleteMST();
    return 0;
}

  int prim(int V,int E,int s[],int d[],int c[])
  {
      struct GraphP* graph = createGraphP(V);
      for(int i=0;i<E;i++)
      {
        addEdge(graph,s[i], d[i], c[i]);
      }

      PrimMST(graph);

      return 0;
  }

int krushkal(int V,int E,int s[],int d[],int c[])
{
    struct Graph* graph = createGraph(V, E);
for(int i=0;i<E;i++)
{
  graph->edge[i].src = s[i];
  graph->edge[i].dest = d[i];
  graph->edge[i].weight = c[i];
}
    KruskalMST(graph);

    return 0;
}

int main(){
